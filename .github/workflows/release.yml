name: Create Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  packages: write

jobs:
  build-all:
    strategy:
      matrix:
        platform: [mac, win, linux]
        include:
          - platform: mac
            runner: macos-latest
            extension: dmg
          - platform: win
            runner: windows-latest
            extension: exe
          - platform: linux
            runner: ubuntu-latest
            extension: deb
    
    runs-on: ${{ matrix.runner }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build for ${{ matrix.platform }}
      run: npm run build:${{ matrix.platform }}

    - name: List build outputs
      run: |
        echo "Build outputs for ${{ matrix.platform }}:"
        find ./dist -type f | sort

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: placcon-launcher-${{ matrix.platform }}
        path: dist/
        retention-days: 0

  create-release:
    needs: build-all
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Find and list release files
      id: find_files
      run: |
        echo "Artifacts directory structure:"
        find artifacts -type f | sort
        echo ""
        echo "Looking for release files:"
        
        # Find DMG files (only ARM64 installers)
        DMG_FILES=$(find artifacts -name "*.dmg" -type f | grep -E "Placcon Launcher-[0-9]+\.[0-9]+\.[0-9]+-arm64" | sort -u)
        echo "DMG files found: $DMG_FILES"
        
        # Find EXE files (only main installers, exclude duplicates and helper files)
        EXE_FILES=$(find artifacts -name "*.exe" -type f | grep -E "Placcon Launcher Setup [0-9]+\.[0-9]+\.[0-9]+" | sort -u)
        echo "EXE files found: $EXE_FILES"
        
        # Find DEB files (only main packages)
        DEB_FILES=$(find artifacts -name "*.deb" -type f | grep -E "placcon-launcher_[0-9]+\.[0-9]+\.[0-9]+" | sort -u)
        echo "DEB files found: $DEB_FILES"
        
        # Create file list for release
        RELEASE_FILES=""
        if [ ! -z "$DMG_FILES" ]; then
          RELEASE_FILES="$RELEASE_FILES $DMG_FILES"
        fi
        if [ ! -z "$EXE_FILES" ]; then
          RELEASE_FILES="$RELEASE_FILES $EXE_FILES"
        fi
        if [ ! -z "$DEB_FILES" ]; then
          RELEASE_FILES="$RELEASE_FILES $DEB_FILES"
        fi
        
        echo "Release files: $RELEASE_FILES"
        echo "files=$RELEASE_FILES" >> $GITHUB_OUTPUT

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: ${{ steps.find_files.outputs.files }}
        generate_release_notes: true
        draft: false
        prerelease: false
        token: ${{ secrets.GITHUB_TOKEN }}
      continue-on-error: true

    - name: Create Release with GitHub CLI (fallback)
      if: failure()
      run: |
        # Install GitHub CLI
        type -p curl >/dev/null || (sudo apt update && sudo apt install curl -y)
        curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
        && sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \
        && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
        && sudo apt update \
        && sudo apt install gh -y
        
        # Get tag name
        TAG_NAME=${GITHUB_REF#refs/tags/}
        
        # Create release
        gh release create $TAG_NAME \
          --title "Release $TAG_NAME" \
          --notes "Automated release for $TAG_NAME" \
          --draft=false \
          --prerelease=false \
          ${{ steps.find_files.outputs.files }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: List files for manual release
      if: always()
      run: |
        echo "## Release Files Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "The following files were found for release:" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ ! -z "${{ steps.find_files.outputs.files }}" ]; then
          echo "**Release files:**" >> $GITHUB_STEP_SUMMARY
          for file in ${{ steps.find_files.outputs.files }}; do
            echo "- \`$file\`" >> $GITHUB_STEP_SUMMARY
          done
        else
          echo "**No release files found!**" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "If automatic release creation failed, you can manually create a release with these files." >> $GITHUB_STEP_SUMMARY 