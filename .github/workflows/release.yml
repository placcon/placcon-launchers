name: Create Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  packages: write

jobs:
  build-all:
    strategy:
      matrix:
        platform: [mac, win, linux]
        include:
          - platform: mac
            runner: macos-latest
            extension: dmg
          - platform: win
            runner: windows-latest
            extension: exe
          - platform: linux
            runner: ubuntu-latest
            extension: deb
    
    runs-on: ${{ matrix.runner }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build for ${{ matrix.platform }}
      run: npm run build:${{ matrix.platform }}

    - name: List build outputs
      run: |
        echo "Build outputs for ${{ matrix.platform }}:"
        find ./dist -type f | sort

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: placcon-launcher-${{ matrix.platform }}
        path: dist/
        retention-days: 0

  create-release:
    needs: build-all
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Update package.json version to match tag
      run: |
        # Extract version from tag (remove 'v' prefix)
        TAG_VERSION=${GITHUB_REF#refs/tags/}
        VERSION=${TAG_VERSION#v}
        echo "Updating package.json version to: $VERSION"
        
        # Update package.json version
        npm version $VERSION --no-git-tag-version
        
        # Show the updated version
        echo "Updated package.json version:"
        cat package.json | grep '"version"'

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Find and list release files
      id: find_files
      run: |
        echo "Artifacts directory structure:"
        find artifacts -type f | sort
        echo ""
        echo "Looking for release files:"
        
        # Find DMG files (only ARM64 installers)
        DMG_FILES=$(find artifacts -name "*.dmg" -type f | grep -E "Placcon Launcher-[0-9]+\.[0-9]+\.[0-9]+-arm64" | sort -u)
        echo "DMG files found: $DMG_FILES"
        
        # Find EXE files (only main Setup installers, be more specific)
        EXE_FILES=$(find artifacts -name "*.exe" -type f | grep -E "Placcon Launcher Setup [0-9]+\.[0-9]+\.[0-9]+\.exe$" | sort -u)
        echo "EXE files found: $EXE_FILES"
        
        # Find DEB files (only main packages)
        DEB_FILES=$(find artifacts -name "*.deb" -type f | grep -E "placcon-launcher_[0-9]+\.[0-9]+\.[0-9]+" | sort -u)
        echo "DEB files found: $DEB_FILES"
        
        # Create file list for release (one file per platform)
        RELEASE_FILES=""
        
        # Add one DMG file (ARM64)
        DMG_FILE=$(echo "$DMG_FILES" | head -1)
        if [ ! -z "$DMG_FILE" ]; then
          RELEASE_FILES="$RELEASE_FILES $DMG_FILE"
        fi
        
        # Add one EXE file (Setup)
        EXE_FILE=$(echo "$EXE_FILES" | head -1)
        if [ ! -z "$EXE_FILE" ]; then
          RELEASE_FILES="$RELEASE_FILES $EXE_FILE"
        fi
        
        # Add DEB files (both architectures)
        if [ ! -z "$DEB_FILES" ]; then
          RELEASE_FILES="$RELEASE_FILES $DEB_FILES"
        fi
        
        echo "Final release files: $RELEASE_FILES"
        echo "files=$RELEASE_FILES" >> $GITHUB_OUTPUT

    - name: Rename files with platform prefixes
      run: |
        echo "Renaming files with platform prefixes..."
        
        # Get tag version for file naming
        TAG_VERSION=${GITHUB_REF#refs/tags/}
        VERSION=${TAG_VERSION#v}
        
        # Rename DMG file (macOS)
        DMG_FILE=$(find artifacts -name "*.dmg" -type f | grep -E "Placcon Launcher-[0-9]+\.[0-9]+\.[0-9]+-arm64" | head -1)
        if [ ! -z "$DMG_FILE" ]; then
          NEW_DMG_NAME="osx-Placcon-Launcher-$VERSION-arm64.dmg"
          NEW_DMG_PATH=$(dirname "$DMG_FILE")/$NEW_DMG_NAME
          mv "$DMG_FILE" "$NEW_DMG_PATH"
          echo "Renamed DMG: $NEW_DMG_NAME"
        fi
        
        # Rename EXE file (Windows)
        EXE_FILE=$(find artifacts -name "*.exe" -type f | grep -E "Placcon Launcher Setup [0-9]+\.[0-9]+\.[0-9]+\.exe$" | head -1)
        if [ ! -z "$EXE_FILE" ]; then
          NEW_EXE_NAME="windows-Placcon-Launcher-Setup-$VERSION.exe"
          NEW_EXE_PATH=$(dirname "$EXE_FILE")/$NEW_EXE_NAME
          mv "$EXE_FILE" "$NEW_EXE_PATH"
          echo "Renamed EXE: $NEW_EXE_NAME"
        fi
        
        # Rename DEB files (Linux)
        DEB_FILES=$(find artifacts -name "*.deb" -type f | grep -E "placcon-launcher_[0-9]+\.[0-9]+\.[0-9]+" | sort -u)
        for DEB_FILE in $DEB_FILES; do
          if [[ "$DEB_FILE" == *"amd64"* ]]; then
            NEW_DEB_NAME="linux-placcon-launcher-$VERSION-amd64.deb"
          elif [[ "$DEB_FILE" == *"arm64"* ]]; then
            NEW_DEB_NAME="linux-placcon-launcher-$VERSION-arm64.deb"
          else
            NEW_DEB_NAME="linux-$(basename "$DEB_FILE")"
          fi
          NEW_DEB_PATH=$(dirname "$DEB_FILE")/$NEW_DEB_NAME
          mv "$DEB_FILE" "$NEW_DEB_PATH"
          echo "Renamed DEB: $NEW_DEB_NAME"
        done
        
        echo "All files renamed with platform prefixes"

    - name: Update file list with renamed files
      id: renamed_files
      run: |
        # Get tag version
        TAG_VERSION=${GITHUB_REF#refs/tags/}
        VERSION=${TAG_VERSION#v}
        
        # Find renamed files
        RENAMED_FILES=""
        
        # Find renamed DMG
        RENAMED_DMG=$(find artifacts -name "osx-Placcon-Launcher-$VERSION-arm64.dmg" -type f)
        if [ ! -z "$RENAMED_DMG" ]; then
          RENAMED_FILES="$RENAMED_FILES $RENAMED_DMG"
        fi
        
        # Find renamed EXE
        RENAMED_EXE=$(find artifacts -name "windows-Placcon-Launcher-Setup-$VERSION.exe" -type f)
        if [ ! -z "$RENAMED_EXE" ]; then
          RENAMED_FILES="$RENAMED_FILES $RENAMED_EXE"
        fi
        
        # Find renamed DEB files
        RENAMED_DEB=$(find artifacts -name "linux-placcon-launcher-$VERSION-*.deb" -type f)
        if [ ! -z "$RENAMED_DEB" ]; then
          RENAMED_FILES="$RENAMED_FILES $RENAMED_DEB"
        fi
        
        echo "Renamed files for release: $RENAMED_FILES"
        echo "files=$RENAMED_FILES" >> $GITHUB_OUTPUT

    - name: Clean existing release assets
      run: |
        # Get tag name
        TAG_NAME=${GITHUB_REF#refs/tags/}
        echo "Cleaning existing assets for tag: $TAG_NAME"
        
        # Check if release exists and delete existing assets
        if gh release view "$TAG_NAME" >/dev/null 2>&1; then
          echo "Release exists, cleaning assets..."
          gh release delete-asset "$TAG_NAME" --yes || true
        else
          echo "Release does not exist yet"
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      continue-on-error: true

    - name: Create Release with GitHub CLI
      run: |
        # Get tag name
        TAG_NAME=${GITHUB_REF#refs/tags/}
        echo "Creating release for tag: $TAG_NAME"
        
        # Create release with files
        gh release create "$TAG_NAME" \
          --title "Release $TAG_NAME" \
          --notes "Placcon Launcher $TAG_NAME - Automated release with macOS ARM64, Windows Setup, and Linux DEB packages" \
          --draft=false \
          --prerelease=false \
          ${{ steps.renamed_files.outputs.files }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: List files for manual release
      if: always()
      run: |
        echo "## Release Files Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "The following files were found for release:" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ ! -z "${{ steps.renamed_files.outputs.files }}" ]; then
          echo "**Release files:**" >> $GITHUB_STEP_SUMMARY
          for file in ${{ steps.renamed_files.outputs.files }}; do
            echo "- \`$file\`" >> $GITHUB_STEP_SUMMARY
          done
        else
          echo "**No release files found!**" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "If automatic release creation failed, you can manually create a release with these files." >> $GITHUB_STEP_SUMMARY 