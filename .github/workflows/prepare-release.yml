name: Prepare Release Files

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: read
  packages: write

jobs:
  build-all:
    strategy:
      matrix:
        platform: [mac, win, linux]
        include:
          - platform: mac
            runner: macos-latest
            extension: dmg
          - platform: win
            runner: windows-latest
            extension: exe
          - platform: linux
            runner: ubuntu-latest
            extension: deb
    
    runs-on: ${{ matrix.runner }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build for ${{ matrix.platform }}
      run: npm run build:${{ matrix.platform }}

    - name: List build outputs
      run: |
        echo "Build outputs for ${{ matrix.platform }}:"
        find ./dist -type f | sort

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: placcon-launcher-${{ matrix.platform }}
        path: dist/
        retention-days: 30

  prepare-release:
    needs: build-all
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Find and list release files
      id: find_files
      run: |
        echo "Artifacts directory structure:"
        find artifacts -type f | sort
        echo ""
        echo "Looking for release files:"
        
        # Find DMG files (only ARM64 installers)
        DMG_FILES=$(find artifacts -name "*.dmg" -type f | grep -E "Placcon Launcher-[0-9]+\.[0-9]+\.[0-9]+-arm64" | sort -u)
        echo "DMG files found: $DMG_FILES"
        
        # Find EXE files (only main Setup installers, be more specific)
        EXE_FILES=$(find artifacts -name "*.exe" -type f | grep -E "Placcon Launcher Setup [0-9]+\.[0-9]+\.[0-9]+\.exe$" | sort -u)
        echo "EXE files found: $EXE_FILES"
        
        # Find DEB files (only main packages)
        DEB_FILES=$(find artifacts -name "*.deb" -type f | grep -E "placcon-launcher_[0-9]+\.[0-9]+\.[0-9]+" | sort -u)
        echo "DEB files found: $DEB_FILES"
        
        # Create file list for release (one file per platform)
        RELEASE_FILES=""
        
        # Add one DMG file (ARM64)
        DMG_FILE=$(echo "$DMG_FILES" | head -1)
        if [ ! -z "$DMG_FILE" ]; then
          RELEASE_FILES="$RELEASE_FILES $DMG_FILE"
        fi
        
        # Add one EXE file (Setup)
        EXE_FILE=$(echo "$EXE_FILES" | head -1)
        if [ ! -z "$EXE_FILE" ]; then
          RELEASE_FILES="$RELEASE_FILES $EXE_FILE"
        fi
        
        # Add DEB files (both architectures)
        if [ ! -z "$DEB_FILES" ]; then
          RELEASE_FILES="$RELEASE_FILES $DEB_FILES"
        fi
        
        echo "Final release files: $RELEASE_FILES"
        echo "files=$RELEASE_FILES" >> $GITHUB_OUTPUT

    - name: Create release summary
      run: |
        echo "## Release Files Ready" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Tag:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "**Version:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ ! -z "${{ steps.find_files.outputs.files }}" ]; then
          echo "**Release files prepared:**" >> $GITHUB_STEP_SUMMARY
          for file in ${{ steps.find_files.outputs.files }}; do
            echo "- \`$file\`" >> $GITHUB_STEP_SUMMARY
          done
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ All files are ready for manual release creation." >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **No release files found!**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Please check the build logs for errors." >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Next steps:**" >> $GITHUB_STEP_SUMMARY
        echo "1. Go to the Releases page" >> $GITHUB_STEP_SUMMARY
        echo "2. Click 'Draft a new release'" >> $GITHUB_STEP_SUMMARY
        echo "3. Use tag: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "4. Upload the files listed above" >> $GITHUB_STEP_SUMMARY 